// Generated by CIRCT firtool-1.62.0
module MMU(
  input         clock,
                reset,
  input  [1:0]  io_csr_plv,
  input  [5:0]  io_csr_crmd_trans,
  input  [31:0] io_csr_dmw0,
                io_csr_dmw1,
  output [3:0]  io_tlbsrch_idx,
  output        io_tlbsrch_hit,
  input         io_tlbwr_en,
  input  [3:0]  io_tlbfill_idx,
  input         io_tlbfill_en,
                io_invtlb_en,
  input  [4:0]  io_invtlb_op,
  input  [9:0]  io_invtlb_asid,
  input  [31:0] io_invtlb_vaddr,
  input         io_i_valid,
  input  [31:0] io_i_vaddr,
  output [31:0] io_i_paddr,
  output [7:0]  io_i_exception,
  input         io_i_stall,
                io_d_rvalid,
                io_d_wvalid,
  input  [31:0] io_d_vaddr,
  output [31:0] io_d_paddr,
  output        io_d_uncache,
  output [7:0]  io_d_exception,
  input         io_d_stall
);

  wire [31:0] _tlb_io_i_paddr;
  wire [7:0]  _tlb_io_i_exception;
  wire [31:0] _tlb_io_d_paddr;
  wire [7:0]  _tlb_io_d_exception;
  reg  [31:0] i_csr_dmw0;
  reg  [31:0] i_csr_dmw1;
  wire [3:0]  _GEN = {2'h0, io_csr_plv};
  wire [3:0]  _i_dmw0_hit_T_5 = i_csr_dmw0[3:0] >> _GEN;
  wire        i_dmw0_hit =
    (io_i_vaddr[31:29] ^ i_csr_dmw0[31:29]) == 3'h0 & _i_dmw0_hit_T_5[0];
  wire [3:0]  _i_dmw1_hit_T_5 = i_csr_dmw1[3:0] >> _GEN;
  wire        i_dmw1_hit =
    (io_i_vaddr[31:29] ^ i_csr_dmw1[31:29]) == 3'h0 & _i_dmw1_hit_T_5[0];
  wire [31:0] _io_i_paddr_T_6 =
    i_dmw1_hit ? {i_csr_dmw1[27:25], io_i_vaddr[28:0]} : _tlb_io_i_paddr;
  wire [31:0] _io_i_paddr_T_7 =
    i_dmw0_hit ? {i_csr_dmw0[27:25], io_i_vaddr[28:0]} : _io_i_paddr_T_6;
  reg         i_exception_ne;
  reg  [31:0] d_csr_dmw0;
  reg  [31:0] d_csr_dmw1;
  reg  [1:0]  d_csr_plv;
  reg         d_is_da;
  reg  [31:0] d_vaddr;
  wire [3:0]  _GEN_0 = {2'h0, d_csr_plv};
  wire [3:0]  _d_dmw0_hit_T_5 = d_csr_dmw0[3:0] >> _GEN_0;
  wire        d_dmw0_hit =
    (d_vaddr[31:29] ^ d_csr_dmw0[31:29]) == 3'h0 & _d_dmw0_hit_T_5[0];
  wire [3:0]  _d_dmw1_hit_T_5 = d_csr_dmw1[3:0] >> _GEN_0;
  wire        d_dmw1_hit =
    (d_vaddr[31:29] ^ d_csr_dmw1[31:29]) == 3'h0 & _d_dmw1_hit_T_5[0];
  wire [31:0] _io_d_paddr_T_6 =
    d_dmw1_hit ? {d_csr_dmw1[27:25], d_vaddr[28:0]} : _tlb_io_d_paddr;
  wire [31:0] _io_d_paddr_T_7 =
    d_dmw0_hit ? {d_csr_dmw0[27:25], d_vaddr[28:0]} : _io_d_paddr_T_6;
  wire        _io_d_uncache_T_7 =
    d_dmw0_hit ? ~(d_csr_dmw0[4]) : d_dmw1_hit & ~(d_csr_dmw1[4]);
  always @(posedge clock) begin
    i_csr_dmw0 <= io_csr_dmw0;
    i_csr_dmw1 <= io_csr_dmw1;
    if (io_i_stall) begin
    end
    else
      i_exception_ne <= io_csr_crmd_trans[0] | i_dmw0_hit | i_dmw1_hit;
    d_csr_dmw0 <= io_csr_dmw0;
    d_csr_dmw1 <= io_csr_dmw1;
    d_csr_plv <= io_csr_plv;
    d_is_da <= io_csr_crmd_trans[0];
    if (io_d_stall) begin
    end
    else
      d_vaddr <= io_d_vaddr;
  end // always @(posedge)
  TLB tlb (
    .clock           (clock),
    .reset           (reset),
    .io_csr_plv      (io_csr_plv),
    .io_tlbsrch_idx  (io_tlbsrch_idx),
    .io_tlbsrch_hit  (io_tlbsrch_hit),
    .io_tlbwr_en     (io_tlbwr_en),
    .io_tlbfill_idx  (io_tlbfill_idx),
    .io_tlbfill_en   (io_tlbfill_en),
    .io_invtlb_en    (io_invtlb_en),
    .io_invtlb_op    (io_invtlb_op),
    .io_invtlb_asid  (io_invtlb_asid),
    .io_invtlb_vaddr (io_invtlb_vaddr),
    .io_i_valid      (io_i_valid),
    .io_i_vaddr      (io_i_vaddr),
    .io_i_paddr      (_tlb_io_i_paddr),
    .io_i_exception  (_tlb_io_i_exception),
    .io_i_stall      (io_i_stall),
    .io_d_rvalid     (io_d_rvalid),
    .io_d_wvalid     (io_d_wvalid),
    .io_d_vaddr      (io_d_vaddr),
    .io_d_paddr      (_tlb_io_d_paddr),
    .io_d_exception  (_tlb_io_d_exception),
    .io_d_stall      (io_d_stall)
  );
  assign io_i_paddr = io_csr_crmd_trans[0] ? io_i_vaddr : _io_i_paddr_T_7;
  assign io_i_exception = i_exception_ne ? 8'h0 : _tlb_io_i_exception;
  assign io_d_paddr = d_is_da ? d_vaddr : _io_d_paddr_T_7;
  assign io_d_uncache = d_is_da ? ~(io_csr_crmd_trans[4]) : _io_d_uncache_T_7;
  assign io_d_exception = d_is_da | d_dmw0_hit | d_dmw1_hit ? 8'h0 : _tlb_io_d_exception;
endmodule

