// Generated by CIRCT firtool-1.62.0
module Divide2(
  input         clock,
                reset,
  input  [31:0] io_num1,
                io_num2,
  input  [4:0]  io_op,
  output [31:0] io_div_out,
  output        io_busy_6,
                io_busy_7,
                io_busy_8,
                io_busy_9,
                io_busy_10,
                io_busy_16,
                io_busy_17,
                io_busy_18,
                io_busy_19,
                io_busy_20
);

  reg  [5:0]  cnt_0;
  reg  [5:0]  cnt_1;
  reg  [5:0]  cnt_2;
  reg  [5:0]  cnt_3;
  reg  [5:0]  cnt_6;
  reg  [5:0]  cnt_7;
  reg  [5:0]  cnt_8;
  reg  [5:0]  cnt_9;
  reg  [5:0]  cnt_10;
  reg  [5:0]  cnt_16;
  reg  [5:0]  cnt_17;
  reg  [5:0]  cnt_18;
  reg  [5:0]  cnt_19;
  reg  [5:0]  cnt_20;
  reg         en_reg1;
  reg  [4:0]  high_reg1;
  reg  [31:0] num1_reg1;
  reg  [31:0] num2_reg1;
  reg  [4:0]  op_reg1;
  reg         sign_reg1;
  reg  [31:0] num2_reg2;
  reg  [4:0]  op_reg2;
  reg         sign_reg2;
  reg  [64:0] q_r;
  wire [31:0] _GEN = sign_reg2 ? 32'(~(q_r[31:0]) + 32'h1) : q_r[31:0];
  wire [31:0] _GEN_0 = sign_reg2 ? 32'(~(q_r[64:33]) + 32'h1) : q_r[64:33];
  wire [31:0] _GEN_1 = op_reg2 == 5'h6 ? q_r[31:0] : q_r[64:33];
  wire [31:0] _GEN_2 = op_reg2 == 5'h5 ? _GEN_0 : _GEN_1;
  wire [95:0] _q_r_T_9 = {64'h0, num1_reg1} << high_reg1;
  wire [5:0]  _GEN_3 = {1'h0, high_reg1};
  wire        _GEN_4 = io_op == 5'h4;
  wire        _GEN_5 = io_op == 5'h5;
  wire        _GEN_6 = _GEN_4 | _GEN_5;
  wire [31:0] num1 = _GEN_6 & io_num1[31] ? 32'(~io_num1 + 32'h1) : io_num1;
  wire [7:0]  _GEN_7 =
    {{num1[11:8], num1[15:14]} & 6'h33, 2'h0} | {num1[15:12], num1[19:16]} & 8'h33;
  wire [18:0] _GEN_8 =
    {num1[5:4], num1[7:6], num1[9:8], _GEN_7, num1[19:18], num1[21:20], num1[23]}
    & 19'h55555;
  wire [3:0]  _GEN_9 = _GEN_8[18:15] | {num1[7:6], num1[9:8]} & 4'h5;
  wire [7:0]  _GEN_10 = _GEN_8[14:7] | _GEN_7 & 8'h55;
  wire [3:0]  _GEN_11 = {_GEN_8[2:0], 1'h0} | {num1[23:22], num1[25:24]} & 4'h5;
  wire [4:0]  _high_T_82 = num1[2] ? 5'h1D : {4'hF, ~(num1[1])};
  wire [4:0]  _high_T_83 = num1[3] ? 5'h1C : _high_T_82;
  wire [4:0]  _high_T_84 = num1[4] ? 5'h1B : _high_T_83;
  wire [4:0]  _high_T_85 = _GEN_9[3] ? 5'h1A : _high_T_84;
  wire [4:0]  _high_T_86 = _GEN_9[2] ? 5'h19 : _high_T_85;
  wire [4:0]  _high_T_87 = _GEN_9[1] ? 5'h18 : _high_T_86;
  wire [4:0]  _high_T_88 = _GEN_9[0] ? 5'h17 : _high_T_87;
  wire [4:0]  _high_T_89 = _GEN_10[7] ? 5'h16 : _high_T_88;
  wire [4:0]  _high_T_90 = _GEN_10[6] ? 5'h15 : _high_T_89;
  wire [4:0]  _high_T_91 = _GEN_10[5] ? 5'h14 : _high_T_90;
  wire [4:0]  _high_T_92 = _GEN_10[4] ? 5'h13 : _high_T_91;
  wire [4:0]  _high_T_93 = _GEN_10[3] ? 5'h12 : _high_T_92;
  wire [4:0]  _high_T_94 = _GEN_10[2] ? 5'h11 : _high_T_93;
  wire [4:0]  _high_T_95 = _GEN_10[1] ? 5'h10 : _high_T_94;
  wire [4:0]  _high_T_96 = _GEN_10[0] ? 5'hF : _high_T_95;
  wire [4:0]  _high_T_97 = _GEN_7[1] ? 5'hE : _high_T_96;
  wire [4:0]  _high_T_98 = _GEN_8[5] | num1[18] ? 5'hD : _high_T_97;
  wire [4:0]  _high_T_99 = num1[19] ? 5'hC : _high_T_98;
  wire [4:0]  _high_T_100 = num1[20] ? 5'hB : _high_T_99;
  wire [4:0]  _high_T_101 = _GEN_11[3] ? 5'hA : _high_T_100;
  wire [4:0]  _high_T_102 = _GEN_11[2] ? 5'h9 : _high_T_101;
  wire [4:0]  _high_T_103 = _GEN_11[1] ? 5'h8 : _high_T_102;
  wire [4:0]  _high_T_104 = _GEN_11[0] ? 5'h7 : _high_T_103;
  wire [4:0]  _high_T_105 = num1[25] ? 5'h6 : _high_T_104;
  wire [4:0]  _high_T_106 = num1[26] ? 5'h5 : _high_T_105;
  wire [4:0]  _high_T_107 = num1[27] ? 5'h4 : _high_T_106;
  wire [4:0]  _high_T_108 = num1[28] ? 5'h3 : _high_T_107;
  wire [4:0]  _high_T_109 = num1[29] ? 5'h2 : _high_T_108;
  wire [4:0]  _high_T_110 = num1[30] ? 5'h1 : _high_T_109;
  always @(posedge clock) begin
    if (reset) begin
      cnt_0 <= 6'h0;
      cnt_1 <= 6'h0;
      cnt_2 <= 6'h0;
      cnt_3 <= 6'h0;
      cnt_6 <= 6'h0;
      cnt_7 <= 6'h0;
      cnt_8 <= 6'h0;
      cnt_9 <= 6'h0;
      cnt_10 <= 6'h0;
      cnt_16 <= 6'h0;
      cnt_17 <= 6'h0;
      cnt_18 <= 6'h0;
      cnt_19 <= 6'h0;
      cnt_20 <= 6'h0;
      num2_reg2 <= 32'h0;
      op_reg2 <= 5'h0;
      sign_reg2 <= 1'h0;
      q_r <= 65'h0;
    end
    else begin
      if (|cnt_0)
        cnt_0 <= 6'(cnt_0 - 6'h1);
      else if (en_reg1)
        cnt_0 <= 6'(6'h21 - _GEN_3);
      if (|cnt_1) begin
        cnt_1 <= 6'(cnt_1 - 6'h1);
        if (q_r[63:32] >= num2_reg2)
          q_r <= {32'(q_r[63:32] - num2_reg2), q_r[31:0], 1'h1};
        else
          q_r <= {q_r[63:0], 1'h0};
      end
      else if (en_reg1) begin
        cnt_1 <= 6'(6'h21 - _GEN_3);
        q_r <= _q_r_T_9[64:0];
      end
      if (|cnt_2)
        cnt_2 <= 6'(cnt_2 - 6'h1);
      else if (en_reg1)
        cnt_2 <= 6'(6'h21 - _GEN_3);
      if (|cnt_3)
        cnt_3 <= 6'(cnt_3 - 6'h1);
      else if (en_reg1)
        cnt_3 <= 6'(6'h21 - _GEN_3);
      if (|cnt_6)
        cnt_6 <= 6'(cnt_6 - 6'h1);
      else if (en_reg1)
        cnt_6 <= 6'(6'h21 - _GEN_3);
      if (|cnt_7)
        cnt_7 <= 6'(cnt_7 - 6'h1);
      else if (en_reg1)
        cnt_7 <= 6'(6'h21 - _GEN_3);
      if (|cnt_8)
        cnt_8 <= 6'(cnt_8 - 6'h1);
      else if (en_reg1)
        cnt_8 <= 6'(6'h21 - _GEN_3);
      if (|cnt_9)
        cnt_9 <= 6'(cnt_9 - 6'h1);
      else if (en_reg1)
        cnt_9 <= 6'(6'h21 - _GEN_3);
      if (|cnt_10)
        cnt_10 <= 6'(cnt_10 - 6'h1);
      else if (en_reg1)
        cnt_10 <= 6'(6'h21 - _GEN_3);
      if (|cnt_16)
        cnt_16 <= 6'(cnt_16 - 6'h1);
      else if (en_reg1)
        cnt_16 <= 6'(6'h21 - _GEN_3);
      if (|cnt_17)
        cnt_17 <= 6'(cnt_17 - 6'h1);
      else if (en_reg1)
        cnt_17 <= 6'(6'h21 - _GEN_3);
      if (|cnt_18)
        cnt_18 <= 6'(cnt_18 - 6'h1);
      else if (en_reg1)
        cnt_18 <= 6'(6'h21 - _GEN_3);
      if (|cnt_19)
        cnt_19 <= 6'(cnt_19 - 6'h1);
      else if (en_reg1)
        cnt_19 <= 6'(6'h21 - _GEN_3);
      if (|cnt_20)
        cnt_20 <= 6'(cnt_20 - 6'h1);
      else if (en_reg1)
        cnt_20 <= 6'(6'h21 - _GEN_3);
      if (en_reg1 & ~(|cnt_1)) begin
        num2_reg2 <= num2_reg1;
        op_reg2 <= op_reg1;
        sign_reg2 <= sign_reg1;
      end
    end
    if (~(|cnt_3)) begin
      en_reg1 <= io_op[2];
      high_reg1 <= num1[31] ? 5'h0 : _high_T_110;
    end
    if (~(|cnt_0))
      num1_reg1 <= num1;
    if (~(|cnt_1))
      num2_reg1 <= _GEN_6 & io_num2[31] ? 32'(~io_num2 + 32'h1) : io_num2;
    if (~(|cnt_2)) begin
      op_reg1 <= io_op;
      sign_reg1 <= _GEN_4 ? io_num1[31] ^ io_num2[31] : _GEN_5 & io_num1[31];
    end
  end // always @(posedge)
  assign io_div_out = op_reg2 == 5'h4 ? _GEN : _GEN_2;
  assign io_busy_6 = |cnt_6;
  assign io_busy_7 = |cnt_7;
  assign io_busy_8 = |cnt_8;
  assign io_busy_9 = |cnt_9;
  assign io_busy_10 = |cnt_10;
  assign io_busy_16 = |cnt_16;
  assign io_busy_17 = |cnt_17;
  assign io_busy_18 = |cnt_18;
  assign io_busy_19 = |cnt_19;
  assign io_busy_20 = |cnt_20;
endmodule

