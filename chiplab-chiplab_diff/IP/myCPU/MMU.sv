// Generated by CIRCT firtool-1.62.0
module MMU(
  input         clock,
  input  [1:0]  io_csr_plv,
  input  [5:0]  io_csr_crmd_trans,
  input  [31:0] io_csr_dmw0,
                io_csr_dmw1,
                io_i_vaddr,
  output [31:0] io_i_paddr,
  output        io_i_uncache,
  input  [31:0] io_d_vaddr,
  output [31:0] io_d_paddr,
  output        io_d_uncache,
  input         io_d_stall
);

  reg  [31:0] i_csr_dmw0;
  reg  [31:0] i_csr_dmw1;
  wire [3:0]  _GEN = {2'h0, io_csr_plv};
  wire [3:0]  _i_dmw0_hit_T_5 = i_csr_dmw0[3:0] >> _GEN;
  wire        i_dmw0_hit =
    (io_i_vaddr[31:29] ^ i_csr_dmw0[31:29]) == 3'h0 & _i_dmw0_hit_T_5[0];
  wire [3:0]  _i_dmw1_hit_T_5 = i_csr_dmw1[3:0] >> _GEN;
  wire        i_dmw1_hit =
    (io_i_vaddr[31:29] ^ i_csr_dmw1[31:29]) == 3'h0 & _i_dmw1_hit_T_5[0];
  wire [31:0] _io_i_paddr_T_6 =
    i_dmw1_hit ? {i_csr_dmw1[27:25], io_i_vaddr[28:0]} : io_i_vaddr;
  wire [31:0] _io_i_paddr_T_7 =
    i_dmw0_hit ? {i_csr_dmw0[27:25], io_i_vaddr[28:0]} : _io_i_paddr_T_6;
  wire        _io_i_uncache_T_7 = i_dmw1_hit ? ~(i_csr_dmw1[4]) : ~(io_csr_crmd_trans[2]);
  wire        _io_i_uncache_T_8 = i_dmw0_hit ? ~(i_csr_dmw0[4]) : _io_i_uncache_T_7;
  reg  [31:0] d_csr_dmw0;
  reg  [31:0] d_csr_dmw1;
  reg  [1:0]  d_csr_plv;
  reg         d_is_da;
  reg  [31:0] d_vaddr;
  wire [3:0]  _GEN_0 = {2'h0, d_csr_plv};
  wire [3:0]  _d_dmw0_hit_T_5 = d_csr_dmw0[3:0] >> _GEN_0;
  wire        d_dmw0_hit =
    (d_vaddr[31:29] ^ d_csr_dmw0[31:29]) == 3'h0 & _d_dmw0_hit_T_5[0];
  wire [3:0]  _d_dmw1_hit_T_5 = d_csr_dmw1[3:0] >> _GEN_0;
  wire        d_dmw1_hit =
    (d_vaddr[31:29] ^ d_csr_dmw1[31:29]) == 3'h0 & _d_dmw1_hit_T_5[0];
  wire [31:0] _io_d_paddr_T_6 = d_dmw1_hit ? {d_csr_dmw1[27:25], d_vaddr[28:0]} : d_vaddr;
  wire [31:0] _io_d_paddr_T_7 =
    d_dmw0_hit ? {d_csr_dmw0[27:25], d_vaddr[28:0]} : _io_d_paddr_T_6;
  wire        _io_d_uncache_T_6 = d_dmw1_hit ? ~(d_csr_dmw1[4]) : ~(io_csr_crmd_trans[4]);
  wire        _io_d_uncache_T_7 = d_dmw0_hit ? ~(d_csr_dmw0[4]) : _io_d_uncache_T_6;
  always @(posedge clock) begin
    i_csr_dmw0 <= io_csr_dmw0;
    i_csr_dmw1 <= io_csr_dmw1;
    d_csr_dmw0 <= io_csr_dmw0;
    d_csr_dmw1 <= io_csr_dmw1;
    d_csr_plv <= io_csr_plv;
    d_is_da <= io_csr_crmd_trans[0];
    if (io_d_stall) begin
    end
    else
      d_vaddr <= io_d_vaddr;
  end // always @(posedge)
  assign io_i_paddr = io_csr_crmd_trans[0] ? io_i_vaddr : _io_i_paddr_T_7;
  assign io_i_uncache = io_csr_crmd_trans[0] ? io_csr_crmd_trans[2] : _io_i_uncache_T_8;
  assign io_d_paddr = d_is_da ? d_vaddr : _io_d_paddr_T_7;
  assign io_d_uncache =
    d_is_da
      ? d_vaddr == 32'hBFAF8000 | d_vaddr == 32'hBFAF8010 | d_vaddr == 32'hBFAF8020
        | d_vaddr == 32'hBFAF8030 | d_vaddr == 32'hBFAF8040 | d_vaddr == 32'hBFAF8050
        | d_vaddr == 32'hBFAF8060 | d_vaddr == 32'hBFAF8070 | d_vaddr == 32'hBFAFF020
        | d_vaddr == 32'hBFAFF030 | d_vaddr == 32'hBFAFF040 | d_vaddr == 32'hBFAFF050
        | d_vaddr == 32'hBFAFF060 | d_vaddr == 32'hBFAFF070 | d_vaddr == 32'hBFAFF080
        | d_vaddr == 32'hBFAFF090 | d_vaddr == 32'hBFAFE000 | d_vaddr == 32'hBFAFFF00
        | d_vaddr == 32'hBFAFFF10 | d_vaddr == 32'hBFAFFF20 | d_vaddr == 32'hBFAFFF30
        | d_vaddr == 32'hBFAFFF40
      : _io_d_uncache_T_7;
endmodule

